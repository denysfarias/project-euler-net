"""
https://projecteuler.net/problem=8

Largest product in a series

Problem 8
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
"""

def find_piece_with_greatest_product(raw_text, length):
    product, zeroes = product_and_zeroes(raw_text[:length])

    if len(raw_text) <= length:
        return raw_text, product
    
    greatest_start_index = 0
    greatest_product = product

    for index in range(length, len(raw_text)):
        previous_digit = int(raw_text[index-length])
        next_digit = int(raw_text[index])

        new_product = 0
        calculated_zeroes = False
        if previous_digit == 0 and zeroes == 1:
            new_product, zeroes = product_and_zeroes(raw_text[index-length+1:index+1])
            calculated_zeroes = True
        elif zeroes == 0:
            new_product = int(product/previous_digit) * next_digit
        
        if new_product > greatest_product:
            greatest_start_index = index + 1 - length
            greatest_product = new_product
        
        product = new_product

        if not calculated_zeroes:
            if previous_digit == 0:
                zeroes -= 1
            if next_digit == 0:
                zeroes += 1

    return raw_text[greatest_start_index:greatest_start_index+length], greatest_product

def product_and_zeroes(raw_numbers):
    product = 1
    zeroes = 0
    for raw_digit in raw_numbers:
        digit = int(raw_digit)
        product *= digit
        if digit == 0:
            zeroes += 1
    return product, zeroes

def main():
    bit_large_number = "73167176531330624919225119674426574742355349194934\
96983520312774506326239578318016984801869478851843\
85861560789112949495459501737958331952853208805511\
12540698747158523863050715693290963295227443043557\
66896648950445244523161731856403098711121722383113\
62229893423380308135336276614282806444486645238749\
30358907296290491560440772390713810515859307960866\
70172427121883998797908792274921901699720888093776\
65727333001053367881220235421809751254540594752243\
52584907711670556013604839586446706324415722155397\
53697817977846174064955149290862569321978468622482\
83972241375657056057490261407972968652414535100474\
82166370484403199890008895243450658541227588666881\
16427171479924442928230863465674813919123162824586\
17866458359124566529476545682848912883142607690042\
24219022671055626321111109370544217506941658960408\
07198403850962455444362981230987879927244284909188\
84580156166097919133875499200524063689912560717606\
05886116467109405077541002256983155200055935729725\
71636269561882670428252483600823257530420752963450"

    length = 13

    piece, product = find_piece_with_greatest_product(bit_large_number, length)

    print(f'{piece=} --> {product=}')

if __name__ == "__main__":
    main()